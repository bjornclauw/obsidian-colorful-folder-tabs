/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => FolderColorPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  enabled: true,
  mappings: [
    // example defaults (you can remove these)
    { name: "Projects", color: "#e74c3c" },
    { name: "Design", color: "#3498db" }
  ]
};
var FolderColorPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.settings = DEFAULT_SETTINGS;
    this.observer = null;
  }
  async onload() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    console.log("FolderColorPlugin loaded", this.settings);
    if (this.settings.enabled)
      this.addStyles();
    this.addSettingTab(new FolderColorSettingTab(this.app, this));
    this.addCommand({
      id: "toggle-folder-colors",
      name: "Toggle folder colors",
      callback: async () => {
        this.settings.enabled = !this.settings.enabled;
        await this.saveData(this.settings);
        if (this.settings.enabled)
          this.addStyles();
        else
          this.removeStyles();
      }
    });
  }
  onunload() {
    this.removeStyles();
    console.log("FolderColorPlugin unloaded");
  }
  addStyles() {
    this.applyMappingsToDOM();
    this.setupObserver();
  }
  removeStyles() {
    if (this.observer) {
      this.observer.disconnect();
      this.observer = null;
    }
    this.clearInlineMappings();
  }
  applyMappingsToDOM() {
    const mappings = this.settings.mappings || [];
    if (!mappings.length)
      return;
    const folderTitleEls = Array.from(document.querySelectorAll('.workspace-leaf-content[data-type="file-explorer"] .nav-files-container .tree-item.nav-folder .nav-folder-title'));
    folderTitleEls.forEach((titleEl) => {
      var _a;
      const text = ((_a = titleEl.textContent) == null ? void 0 : _a.trim()) || "";
      const mapping = mappings.find((m) => m.name === text);
      const folderItem = titleEl.closest(".tree-item.nav-folder");
      if (mapping && folderItem) {
        folderItem.style.setProperty("--tab-color", mapping.color);
        titleEl.style.setProperty("--tab-color", mapping.color);
      }
    });
  }
  clearInlineMappings() {
    const folderItems = Array.from(document.querySelectorAll('.workspace-leaf-content[data-type="file-explorer"] .nav-files-container .tree-item.nav-folder'));
    folderItems.forEach((el) => {
      el.style.removeProperty("--tab-color");
    });
    const titleEls = Array.from(document.querySelectorAll('.workspace-leaf-content[data-type="file-explorer"] .nav-files-container .tree-item.nav-folder .nav-folder-title'));
    titleEls.forEach((el) => el.style.removeProperty("--tab-color"));
  }
  setupObserver() {
    if (this.observer)
      return;
    const container = document.querySelector('.workspace-leaf-content[data-type="file-explorer"] .nav-files-container');
    if (!container)
      return;
    this.observer = new MutationObserver(() => {
      setTimeout(() => this.applyMappingsToDOM(), 50);
    });
    this.observer.observe(container, { childList: true, subtree: true });
  }
};
var FolderColorSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Folder Color settings" });
    new import_obsidian.Setting(containerEl).setName("Enable folder colors").setDesc("Toggle the folder color styling in the file explorer").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.enabled).onChange(async (value) => {
        this.plugin.settings.enabled = value;
        await this.plugin.saveData(this.plugin.settings);
        if (value)
          this.plugin.addStyles();
        else
          this.plugin.removeStyles();
      })
    );
    containerEl.createEl("h3", { text: "Folder \u2192 Color mappings" });
    const list = containerEl.createDiv({ cls: "folder-color-list" });
    const mappings = this.plugin.settings.mappings || [];
    mappings.forEach((m, idx) => {
      const row = list.createDiv({ cls: "folder-mapping-row" });
      row.createEl("label", { text: "Folder name", cls: "mapping-label" });
      const nameInput = row.createEl("input", { attr: { type: "text", placeholder: "Folder name", value: m.name } });
      nameInput.style.marginRight = "8px";
      nameInput.onchange = async () => {
        mappings[idx].name = nameInput.value.trim();
        await this.plugin.saveData(this.plugin.settings);
        this.plugin.addStyles();
        this.display();
      };
      row.createEl("label", { text: "Color", cls: "mapping-label" });
      const colorInput = row.createEl("input", { attr: { type: "color", value: m.color || "#ff0000" } });
      colorInput.style.marginRight = "8px";
      colorInput.onchange = async () => {
        mappings[idx].color = colorInput.value;
        await this.plugin.saveData(this.plugin.settings);
        this.plugin.addStyles();
      };
      const removeBtn = row.createEl("button", { text: "Remove" });
      removeBtn.onclick = async () => {
        mappings.splice(idx, 1);
        await this.plugin.saveData(this.plugin.settings);
        this.plugin.addStyles();
        this.display();
      };
    });
    containerEl.createEl("h4", { text: "Add mapping" });
    const addRow = containerEl.createDiv({ cls: "folder-mapping-add" });
    const newName = addRow.createEl("input", { attr: { type: "text", placeholder: "Folder name" } });
    newName.style.marginRight = "8px";
    const newColor = addRow.createEl("input", { attr: { type: "color", value: "#ff0000" } });
    newColor.style.marginRight = "8px";
    const addBtn = addRow.createEl("button", { text: "Add" });
    addBtn.onclick = async () => {
      const name = (newName.value || "").trim();
      const color = newColor.value || "#ffffff";
      if (!name)
        return;
      this.plugin.settings.mappings = this.plugin.settings.mappings || [];
      this.plugin.settings.mappings.push({ name, color });
      await this.plugin.saveData(this.plugin.settings);
      this.plugin.addStyles();
      this.display();
    };
  }
};
//# sourceMappingURL=data:application/json;base64,
