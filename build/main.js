/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var f=Object.defineProperty;var E=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var M=Object.prototype.hasOwnProperty;var S=(i,l)=>{for(var e in l)f(i,e,{get:l[e],enumerable:!0})},w=(i,l,e,t)=>{if(l&&typeof l=="object"||typeof l=="function")for(let s of x(l))!M.call(i,s)&&s!==e&&f(i,s,{get:()=>l[s],enumerable:!(t=E(l,s))||t.enumerable});return i};var T=i=>w(f({},"__esModule",{value:!0}),i);var F={};S(F,{default:()=>h});module.exports=T(F);var c=require("obsidian");var y={enabled:!0,mappings:[{name:"Projects",color:"#e74c3c"},{name:"Design",color:"#3498db"}]},h=class extends c.Plugin{constructor(){super(...arguments);this.settings=y;this.observer=null;this.explorerObservers=new Map}async onload(){this.settings=Object.assign({},y,await this.loadData()),console.log("FolderColorPlugin loaded",this.settings),this.addSettingTab(new v(this.app,this)),this.addCommand({id:"toggle-folder-colors",name:"Toggle folder colors",callback:async()=>{this.settings.enabled=!this.settings.enabled,await this.saveData(this.settings),this.settings.enabled?this.addStyles():this.removeStyles()}}),this.app.workspace.onLayoutReady(()=>{this.settings.enabled&&this.addStyles()})}onunload(){this.removeStyles(),console.log("FolderColorPlugin unloaded")}addStyles(){this.applyMappingsToAllExplorers(),this.setupObserversForExplorers()}removeStyles(){document.querySelectorAll(".tree-item.nav-folder, .nav-folder-title").forEach(t=>{t.style.removeProperty("--tab-color")}),this.observer&&(this.observer.disconnect(),this.observer=null),this.explorerObservers.forEach(t=>t.disconnect()),this.explorerObservers=new Map}applyMappingsToAllExplorers(){document.querySelectorAll('.workspace-leaf-content[data-type="file-explorer"]').forEach(t=>this.applyMappingsToDOM(t))}applyMappingsToDOM(e){let t=this.settings.mappings||[];if(!t.length)return;Array.from(e.querySelectorAll(".tree-item.nav-folder .nav-folder-title")).forEach(n=>{var r;let a=((r=n.textContent)==null?void 0:r.trim())||"",p=t.find(o=>o.name===a),d=n.closest(".tree-item.nav-folder");p&&d&&(d.style.setProperty("--tab-color",p.color),n.style.setProperty("--tab-color",p.color))})}setupObserversForExplorers(){this.observer&&this.observer.disconnect(),this.observer=new MutationObserver(s=>{s.forEach(n=>{n.addedNodes.forEach(a=>{a instanceof HTMLElement&&a.matches('.workspace-leaf-content[data-type="file-explorer"]')&&(this.applyMappingsToDOM(a),this.observeExplorerContainer(a))})})});let e=document.querySelector(".workspace");e&&this.observer.observe(e,{childList:!0,subtree:!0}),document.querySelectorAll('.workspace-leaf-content[data-type="file-explorer"]').forEach(s=>this.observeExplorerContainer(s))}observeExplorerContainer(e){if(this.explorerObservers.has(e))return;let t=new MutationObserver(()=>{this.applyMappingsToDOM(e)});t.observe(e,{childList:!0,subtree:!0}),this.explorerObservers.set(e,t)}},v=class extends c.PluginSettingTab{constructor(e,t){super(e,t);this.plugin=t}display(){let{containerEl:e}=this;e.empty(),e.createEl("h2",{text:"Folder Color settings"}),new c.Setting(e).setName("Enable folder colors").setDesc("Toggle the folder color styling in the file explorer").addToggle(r=>r.setValue(this.plugin.settings.enabled).onChange(async o=>{this.plugin.settings.enabled=o,await this.plugin.saveData(this.plugin.settings),o?this.plugin.addStyles():this.plugin.removeStyles()})),e.createEl("h3",{text:"Folder \u2192 Color mappings"});let t=e.createDiv({cls:"folder-color-list"}),s=this.plugin.settings.mappings||[];s.forEach((r,o)=>{let g=t.createDiv({cls:"folder-mapping-row"});g.createEl("label",{text:"Folder name",cls:"mapping-label"});let u=g.createEl("input",{attr:{type:"text",placeholder:"Folder name",value:r.name}});u.style.marginRight="8px",u.onchange=async()=>{s[o].name=u.value.trim(),await this.plugin.saveData(this.plugin.settings),this.plugin.addStyles(),this.display()},g.createEl("label",{text:"Color",cls:"mapping-label"});let m=g.createEl("input",{attr:{type:"color",value:r.color||"#ff0000"}});m.style.marginRight="8px",m.onchange=async()=>{s[o].color=m.value,await this.plugin.saveData(this.plugin.settings),this.plugin.addStyles()};let b=g.createEl("button",{text:"Remove"});b.onclick=async()=>{s.splice(o,1),await this.plugin.saveData(this.plugin.settings),this.plugin.addStyles(),this.display()}}),e.createEl("h4",{text:"Add mapping"});let n=e.createDiv({cls:"folder-mapping-add"}),a=n.createEl("input",{attr:{type:"text",placeholder:"Folder name"}});a.style.marginRight="8px";let p=n.createEl("input",{attr:{type:"color",value:"#ff0000"}});p.style.marginRight="8px";let d=n.createEl("button",{text:"Add"});d.onclick=async()=>{let r=(a.value||"").trim(),o=p.value||"#ffffff";r&&(this.plugin.settings.mappings=this.plugin.settings.mappings||[],this.plugin.settings.mappings.push({name:r,color:o}),await this.plugin.saveData(this.plugin.settings),this.plugin.addStyles(),this.display())}}};
