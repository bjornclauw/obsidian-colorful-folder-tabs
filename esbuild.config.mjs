import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import fs from 'fs';
import path from 'path';

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");

const outDir = 'build';
const outFile = path.join(outDir, 'main.js');
const outCss = path.join(outDir, 'main.css');
const outCssRenamed = path.join(outDir, 'styles.css');

function ensureOutDir() {
	if (!fs.existsSync(outDir)) fs.mkdirSync(outDir, { recursive: true });
}

function copyCssIfExists() {
	try {
		if (fs.existsSync(outCss)) {
			fs.renameSync(outCss,outCssRenamed);
			console.log(`Copied ${outCss} -> ${outCssRenamed}`);
		}
	} catch (e) {
		console.error('Failed to copy CSS:', e);
	}
}

function copyManifestIfExists() {
	try {
		if (fs.existsSync('manifest.json')) {
			fs.copyFileSync('manifest.json','./build/manifest.json');
			
		}
		if (fs.existsSync('package.json')) {
			fs.copyFileSync('package.json','./build/package.json');
			
		}
	} catch (e) {
		console.error('Failed to copy Manifest', e);
	}
}

const buildOptions = {
	banner: { js: banner },
	entryPoints: ["src/main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins
	],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: outFile,
	minify: prod,
};

ensureOutDir();

const context = await esbuild.context(buildOptions);

if (prod) {
	// Production build
	await context.rebuild();
	copyCssIfExists();
	copyManifestIfExists();
	process.exit(0);
} else {
	// Dev watch: start watching and also watch the emitted CSS file to copy it
	// after each rebuild.
	await context.watch();
	// copy once for the initial build
	copyCssIfExists();

	// Watch for changes to main.css and copy to styles.css when modified
	fs.watchFile(outCss, { interval: 200 }, (curr, prev) => {
		if (curr.mtimeMs !== prev.mtimeMs) {
			copyCssIfExists();
		}
	});

	console.log('[watch] build finished, watching for changes...');
}
